#!/usr/bin/env ruby

require 'set'
require 'yaml'

# USAGE:
# ./secret_santa config_file.yml

Person = Struct.new(:name, :email)
class Person
  EMAIL_PATTERN = /(.+)? <(.+?@.+?)>/
  def self.from(str)
    m = str.match(EMAIL_PATTERN)
    if m
      Person.new(m[1], m[2])
    else
      raise ArgumentError, "Invalid format for name and email: '#{str}'"
    end
  end

  def to_s
    "#{name} <#{email}>"
  end
end

def debug(obj)
  p obj if ENV["DEBUG"]
end

def main(args)
  config_file = args.first
  config = YAML.load_file(config_file)

  people = config["people"].map {|ea| Person.from(ea) }
  exclusion_groups = config["exclusion_groups"].map do |group|
    group.map {|ea| people.find {|p| p.name == ea} }
  end

  exclusions = Hash[people.map do |person|
    not_self = [person]
    not_from_groups = exclusion_groups.select {|g| g.include?(person) }.flatten
    [person, Set.new(not_self + not_from_groups)]
  end]

  debug people
  debug exclusion_groups
  debug exclusions
  exclusions.each do |k, v|
    debug "#{k}: not #{v.to_a.map {|ea| ea.name }.join(', ')}"
  end

  solution = {}
  people.each do |person|
    remaining = people - solution.values
    available = remaining - exclusions[person].to_a
    raise RuntimeError, "Backtrack required" if available.empty?

    selection = available.sample
    solution[person] = selection
  end

  solution.each do |giver, recipient|
    puts "#{giver.name} => #{recipient.name}"
  end
end

main(ARGV) if $PROGRAM_NAME == __FILE__
